import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import { getAllUsers } from './userService';

export const generateUsersReport = async (currentUser) => {
  try {
    // Verify token before making the request
    const token = localStorage.getItem('token');
    if (!token) {
      throw new Error('Authentication token not found');
    }

    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    
    // Define margins and spacing
    const margin = {
      top: 20,
      bottom: 30,
      left: 20,
      right: 20
    };
    const headerHeight = 50;
    const tableSpacing = 15;
    const metadataSpacing = 25;

    // Define consistent colors and styles
    const primaryColor = '#333333';
    const secondaryColor = '#666666';

    // Add header text with professional styling - remove separator line
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.setTextColor(primaryColor);
    doc.text('UNIVERSITY OF SANTO TOMAS', pageWidth/2, 20, { align: 'center' });
    
    doc.setFontSize(12);
    doc.text('National Training Service - Literacy Training Service', pageWidth/2, 30, { align: 'center' });
    doc.text('AralKademy Learning Management System', pageWidth/2, 40, { align: 'center' });

    // Add report title
    doc.setFontSize(14);
    doc.text('USERS REPORT', pageWidth/2, 60, { align: 'center' });

    // Add report metadata only in footer
    const now = new Date();
    const dateStr = now.toLocaleString('en-US', {
      hour12: true,
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    // Updated table styles with proper spacing
    const tableStyles = {
      theme: 'grid',
      headStyles: {
        fillColor: [240, 240, 240],
        textColor: [51, 51, 51],
        fontStyle: 'bold',
        fontSize: 10,
        lineWidth: 0.1,
        cellPadding: 5,
      },
      bodyStyles: {
        textColor: [51, 51, 51],
        fontSize: 9,
        lineWidth: 0.1,
        cellPadding: 4,
      },
      alternateRowStyles: {
        fillColor: [248, 248, 248]
      },
      margin,
      pageBreak: 'avoid', // Try to keep tables together
      startY: headerHeight + tableSpacing,
      didDrawPage: (data) => {
        // Header for continuation pages
        if (data.pageCount > 1) {
          doc.setFillColor(240, 240, 240);
          doc.rect(0, 0, pageWidth, 20, 'F');
          doc.setTextColor(primaryColor);
          doc.setFontSize(10);
          doc.text('Users Report - Continued', pageWidth/2, 15, { align: 'center' });
        }

        // Footer with page numbers for all pages
        const footerY = pageHeight - margin.bottom;
        doc.setFontSize(8);
        doc.setTextColor(secondaryColor);
        doc.text(`Report generated by: ${currentUser?.name || 'Administrator'}`, margin.left, footerY);
        doc.text(`Generated on: ${dateStr}`, margin.left, footerY + 4);
        doc.text(`Page ${data.pageCount} of ${doc.internal.getNumberOfPages()}`, pageWidth - margin.right, footerY, { align: 'right' });
      }
    };

    const response = await getAllUsers({ 
      page: 1,
      limit: 9999 // Get all users for the report
    });
    
    if (!response || !response.users) {
      throw new Error('Invalid response data');
    }

    const users = response.users;

    // Group users by role
    const admins = users.filter(user => user.role === 'admin');
    const teachers = users.filter(user => user.role === 'teacher');
    const learners = users.filter(user => user.role === 'learner');
    const studentTeachers = users.filter(user => user.role === 'student_teacher');

    // Common table headers
    const headers = [['User ID', 'Name', 'Email', 'Contact', 'School ID']];

    // Function to format user data
    const formatUserData = user => [
      user.id,
      `${user.first_name} ${user.middle_initial || ''} ${user.last_name}`,
      user.email,
      user.contact_no,
      user.school_id
    ];

    // Function to check if table will fit on current page
    const calculateTableHeight = (data) => {
      // Instead of creating a mock doc, calculate approximate height
      const rowHeight = 12; // Approximate height per row in points
      const headerHeight = 15; // Approximate header height
      const padding = 10; // Extra padding
      return headerHeight + (data.length * rowHeight) + padding;
    };

    // Modified section table function with horizontal line under title
    const addSectionTable = (title, data, startY) => {
      const tableHeight = calculateTableHeight(data);

      // Check if need to start new page
      if (startY + tableHeight > pageHeight - margin.bottom - metadataSpacing) {
        doc.addPage();
        startY = margin.top + tableSpacing;
      }

      // Add section title with spacing and underline
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(12);
      doc.setTextColor(primaryColor);
      doc.text(title.toUpperCase(), margin.left, startY);
      
      // Add horizontal line under section title
      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.5);
      doc.line(margin.left, startY + 2, pageWidth - margin.right, startY + 2);
      
      // Add table with proper spacing
      autoTable(doc, {
        ...tableStyles,
        startY: startY + 10,
        head: headers,
        body: data.map(formatUserData),
        didDrawPage: (data) => {
          // Simplified header for continuation pages
          if (data.pageCount > 1) {
            doc.setFillColor(240, 240, 240);
            doc.rect(0, 0, pageWidth, 20, 'F');
            doc.setTextColor(primaryColor);
            doc.setFontSize(10);
            doc.text('Users Report - Continued', pageWidth/2, 15, { align: 'center' });
          }

          // Add footer to each page with page number
          const footerY = pageHeight - margin.bottom;
          doc.setFontSize(8);
          doc.setTextColor(secondaryColor);
          doc.text(`Report generated by: ${currentUser?.name || 'Administrator'}`, margin.left, footerY);
          doc.text(`Generated on: ${dateStr}`, margin.left, footerY + 4);
          doc.text(`Page ${doc.internal.getNumberOfPages()}`, pageWidth - margin.right, footerY, { align: 'right' });
        }
      });
      
      return doc.lastAutoTable.finalY + tableSpacing;
    };

    // Add tables with spacing checks
    let currentY = headerHeight + tableSpacing;

    if (admins.length > 0) {
      currentY = addSectionTable('Administrators', admins, currentY);
    }
    if (teachers.length > 0) {
      currentY = addSectionTable('Teachers', teachers, currentY);
    }
    if (learners.length > 0) {
      currentY = addSectionTable('Learners', learners, currentY);
    }
    if (studentTeachers.length > 0) {
      currentY = addSectionTable('Student Teachers', studentTeachers, currentY);
    }

    return doc;
  } catch (error) {
    console.error('Error generating report:', error);
    throw new Error(error.message || 'Failed to generate report');
  }
};

export const generateEnrollmentReport = async (enrollments) => {
  try {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    
    // Define margins and metadata
    const margin = {
      top: 20,
      bottom: 30,
      left: 20,
      right: 20
    };

    // Get user info for footer
    const user = JSON.parse(localStorage.getItem('user')) || {};
    const dateStr = new Date().toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    // Updated table configuration with more space for footer
    const tableConfig = {
      theme: 'grid',
      headStyles: {
        fillColor: [33, 37, 41],
        textColor: [255, 255, 255],
        fontSize: 10,
        fontStyle: 'bold'
      },
      bodyStyles: {
        fontSize: 9,
        cellPadding: 4
      },
      margin: {
        top: 20,
        bottom: 40, // Increased bottom margin
        left: 20,
        right: 20
      },
      didDrawPage: (data) => {
        // Header for continuation pages
        if (data.pageCount > 1) {
          doc.setFillColor(240, 240, 240);
          doc.rect(0, 0, pageWidth, 20, 'F');
          doc.setFontSize(10);
          doc.text('Enrollment Report - Continued', pageWidth/2, 15, { align: 'center' });
        }

        // Footer on all pages with fixed total pages
        const footerY = pageHeight - 25; // Moved up footer position
        doc.setFontSize(8);
        doc.setTextColor(100);
        doc.text(`Report generated by: ${user.role || 'Administrator'}`, margin.left, footerY);
        doc.text(`Generated on: ${dateStr}`, margin.left, footerY + 4);
        doc.text(`Page ${doc.internal.getCurrentPageInfo().pageNumber}/${doc.internal.getNumberOfPages()}`, pageWidth - 20, footerY, { align: 'right' });
      }
    };

    // Add header
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.text('UNIVERSITY OF SANTO TOMAS', pageWidth/2, 20, { align: 'center' });
    
    doc.setFontSize(12);
    doc.text('National Training Service - Literacy Training Service', pageWidth/2, 30, { align: 'center' });
    doc.text('AralKademy Learning Management System', pageWidth/2, 40, { align: 'center' });
    
    doc.setFontSize(14);
    doc.text('ENROLLMENT REPORT', pageWidth/2, 55, { align: 'center' });

    // Group enrollments
    const pending = enrollments.filter(e => e.status.toLowerCase() === 'pending');
    const approved = enrollments.filter(e => e.status.toLowerCase() === 'approved');
    const rejected = enrollments.filter(e => e.status.toLowerCase() === 'rejected');

    let startY = 70;

    // Modified section adding function to include section titles
    const addSection = (title, data, yPos) => {
      if (data.length === 0) return yPos;

      // Add section title
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(12);
      doc.setTextColor(33, 37, 41);
      doc.text(title, margin.left, yPos);
      
      // Add underline
      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.5);
      doc.line(margin.left, yPos + 2, pageWidth - margin.right, yPos + 2);

      // Add table below title
      autoTable(doc, {
        ...tableConfig,
        startY: yPos + 10, // Space after title
        head: [['ID', 'Full Name', 'Status', 'Date']],
        body: data.map(item => [
          item.id,
          item.fullName,
          item.status,
          item.enrollmentDate
        ])
      });

      return doc.lastAutoTable.finalY + 15; // Increased spacing between sections
    };

    // Add sections with titles
    if (pending.length) startY = addSection('Pending Enrollments', pending, startY);
    if (approved.length) startY = addSection('Approved Enrollments', approved, startY);
    if (rejected.length) startY = addSection('Rejected Enrollments', rejected, startY);

    // Add summary page
    doc.addPage();
    doc.setFontSize(14);
    doc.text('Summary', pageWidth/2, 30, { align: 'center' });

    const summaryData = [
      ['Status', 'Count'],
      ['Pending', pending.length],
      ['Approved', approved.length],
      ['Rejected', rejected.length],
      ['Total', enrollments.length]
    ];

    autoTable(doc, {
      ...tableConfig,
      startY: 40,
      head: [summaryData[0]],
      body: summaryData.slice(1),
      margin: { left: 50, right: 50 }
    });

    return doc;
  } catch (error) {
    console.error('Error generating enrollment report:', error);
    throw new Error('Failed to generate enrollment report');
  }
};