import { describe, it, expect, vi, beforeEach } from 'vitest';
import { 
  generateUsersReport,
  generateEnrollmentReport 
} from '../../src/services/reportService';
import { getAllUsers } from '../../src/services/userService';

// Mock userService
vi.mock('../../src/services/userService', () => ({
  getAllUsers: vi.fn()
}));

describe('Report Service', () => {
  const mockCurrentUser = {
    id: 1,
    name: 'Admin User',
    role: 'admin'
  };

  beforeEach(() => {
    vi.clearAllMocks();
    localStorage.clear();
    localStorage.setItem('token', 'test-token');
    localStorage.setItem('user', JSON.stringify(mockCurrentUser));
  });

  describe('generateUsersReport', () => {
    it('should generate PDF report with user data', async () => {
      const mockUsers = [
        { id: 1, first_name: 'John', last_name: 'Admin', role: 'admin', email: 'admin@test.com', contact_no: '1234567890', school_id: 'A001' },
        { id: 2, first_name: 'Jane', last_name: 'Teacher', role: 'teacher', email: 'teacher@test.com', contact_no: '0987654321', school_id: 'T001' },
        { id: 3, first_name: 'Jim', last_name: 'Learner', role: 'learner', email: 'learner@test.com', contact_no: '1122334455', school_id: 'L001' }
      ];

      getAllUsers.mockResolvedValueOnce({ users: mockUsers });

      const pdfDoc = await generateUsersReport(mockCurrentUser);
      
      expect(pdfDoc).toBeDefined();
      expect(typeof pdfDoc.output).toBe('function');

      // Get PDF output as arraybuffer and convert to string
      const pdfOutput = pdfDoc.output('arraybuffer');
      const pdfBuffer = Buffer.from(new Uint8Array(pdfOutput));
      const pdfText = pdfBuffer.toString();

      // Test content
      expect(pdfText).toMatch(/.*USERS REPORT.*/i);
      expect(pdfText).toMatch(/.*John.*Admin.*/i);
      expect(pdfText).toMatch(/.*Jane.*Teacher.*/i);
    });

    it('should handle empty user list', async () => {
      getAllUsers.mockResolvedValueOnce({ users: [] });

      const pdfDoc = await generateUsersReport(mockCurrentUser);
      const pdfOutput = pdfDoc.output('arraybuffer');
      const pdfBuffer = Buffer.from(new Uint8Array(pdfOutput));
      const pdfText = pdfBuffer.toString();

      expect(pdfText).toMatch(/.*USERS REPORT.*/i);
      expect(pdfText).toMatch(/.*No users found.*/i);
    });

    it('should handle missing authentication token', async () => {
      localStorage.clear(); // Clear all storage including token
      
      try {
        await generateUsersReport(mockCurrentUser);
        // If we reach here, the test should fail
        expect(true).toBe(false); // Force test to fail if no error thrown
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
        expect(error.message).toBe('Authentication token not found');
      }
    });

    it('should include metadata in report footer', async () => {
      getAllUsers.mockResolvedValueOnce({ users: [] });

      const pdfDoc = await generateUsersReport(mockCurrentUser);
      const pdfOutput = pdfDoc.output('arraybuffer');
      const pdfBuffer = Buffer.from(new Uint8Array(pdfOutput));
      const pdfText = pdfBuffer.toString();

      const currentYear = new Date().getFullYear().toString();
      expect(pdfText).toMatch(new RegExp(`.*Report generated by: ${mockCurrentUser.role}.*`));
      expect(pdfText).toMatch(new RegExp(`.*${currentYear}.*`));
    });
  });

  describe('generateEnrollmentReport', () => {
    const mockEnrollments = [
      { id: 1, fullName: 'John Doe', status: 'pending', enrollmentDate: '2024-01-01' },
      { id: 2, fullName: 'Jane Smith', status: 'approved', enrollmentDate: '2024-01-02' },
      { id: 3, fullName: 'Jim Brown', status: 'rejected', enrollmentDate: '2024-01-03' }
    ];

    it('should generate PDF report with enrollment data', async () => {
      const pdfDoc = await generateEnrollmentReport(mockEnrollments);
      const pdfOutput = pdfDoc.output('arraybuffer');
      const pdfBuffer = Buffer.from(new Uint8Array(pdfOutput));
      const pdfText = pdfBuffer.toString();

      expect(pdfText).toMatch(/.*ENROLLMENT REPORT.*/i);
      expect(pdfText).toMatch(/.*John Doe.*/i);
      expect(pdfText).toMatch(/.*pending.*/i);
    });

    it('should include summary statistics', async () => {
      const pdfDoc = await generateEnrollmentReport(mockEnrollments);
      const pdfOutput = pdfDoc.output('arraybuffer');
      const pdfBuffer = Buffer.from(new Uint8Array(pdfOutput));
      const pdfText = pdfBuffer.toString();

      expect(pdfText).toMatch(/.*Summary.*/i);
      expect(pdfText).toMatch(/.*Pending: 1.*/i);
      expect(pdfText).toMatch(/.*Approved: 1.*/i);
      expect(pdfText).toMatch(/.*Rejected: 1.*/i);
      expect(pdfText).toMatch(/.*Total: 3.*/i);
    });

    it('should handle empty enrollment list', async () => {
      const pdfDoc = await generateEnrollmentReport([]);
      const pdfOutput = pdfDoc.output('arraybuffer');
      const pdfBuffer = Buffer.from(new Uint8Array(pdfOutput));
      const pdfText = pdfBuffer.toString();

      expect(pdfText).toMatch(/.*ENROLLMENT REPORT.*/i);
      expect(pdfText).toMatch(/.*No enrollments found.*/i);
    });

    it('should include proper headers and footers', async () => {
      const pdfDoc = await generateEnrollmentReport(mockEnrollments);
      const pdfOutput = pdfDoc.output('arraybuffer');
      const pdfBuffer = Buffer.from(new Uint8Array(pdfOutput));
      const pdfText = pdfBuffer.toString();

      expect(pdfText).toMatch(/.*UNIVERSITY OF SANTO TOMAS.*/i);
      expect(pdfText).toMatch(/.*National Training Service.*/i);
      expect(pdfText).toMatch(/.*Page.*/i);
    });
  });
});
